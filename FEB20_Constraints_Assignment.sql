--20-02-2025
--GRANT & REVOKE

CREATE LOGIN AISHWARYA WITH PASSWORD='AISH';

CREATE DATABASE MYDB;

CREATE USER USER1 FOR LOGIN AISHWARYA;

SELECT USER_NAME();

EXECUTE AS USER='USER1';

REVERT;

CREATE TABLE EMPTBL(ENAME VARCHAR(40));

GRANT SELECT, INSERT, DELETE, UPDATE ON EMP TO USER1;

--ASSIGNMENT: BANK TRANSACTIONS & USER PERMISSIONS (DCL & TCL)

CREATE TABLE BANKACCOUNTSTBL(
ACCOUNTID INT IDENTITY(20251, 1) PRIMARY KEY,
CUSTOMERNAME VARCHAR(60),
ACCOUNTTYPE VARCHAR(60),
BALANCE DECIMAL(10,2)
);

INSERT INTO BANKACCOUNTSTBL(CUSTOMERNAME, ACCOUNTTYPE, BALANCE) VALUES ('NETRA', 'SAVINGS', 2787.00);
INSERT INTO BANKACCOUNTSTBL(CUSTOMERNAME, ACCOUNTTYPE, BALANCE) VALUES ('MITRA', 'CURRENT', 16000.00);
INSERT INTO BANKACCOUNTSTBL(CUSTOMERNAME, ACCOUNTTYPE, BALANCE) VALUES ('SUMATI', 'SAVINGS', 44003.00);
INSERT INTO BANKACCOUNTSTBL(CUSTOMERNAME, ACCOUNTTYPE, BALANCE) VALUES ('KAVYA', 'CURRENT', 89800.00);
INSERT INTO BANKACCOUNTSTBL(CUSTOMERNAME, ACCOUNTTYPE, BALANCE) VALUES ('SASHA', 'SAVINGS', 6000.00);

SELECT * FROM BANKACCOUNTSTBL;

UPDATE BANKACCOUNTSTBL SET BALANCE=19000 WHERE ACCOUNTID=20252;

BEGIN TRANSACTION;

--WITHDRAW 5000 FROM USER WITH ACCOUNTID=20252
BEGIN
UPDATE BANKACCOUNTSTBL SET BALANCE=BALANCE-5000 WHERE ACCOUNTID=20252;
IF (SELECT BALANCE FROM BANKACCOUNTSTBL WHERE ACCOUNTID=20252) <5000
BEGIN
ROLLBACK TRANSACTION SVPT;
	PRINT 'Transaction rolled back due to condition.';
END
ELSE
BEGIN
COMMIT TRANSACTION;
    PRINT 'Transaction committed.';
END
END

SAVE TRANSACTION SVPT;

--DCL
CREATE LOGIN BANKACCLOGIN WITH PASSWORD='MYBNK';

CREATE USER AISHWARYA FOR LOGIN BANKACCLOGIN;

GRANT SELECT, DELETE, INSERT ON BANKACCOUNTSTBL TO AISHWARYA;

REVOKE DELETE ON BANKACCOUNTSTBL FROM AISHWARYA;

--FORGEIGN KEY
CREATE TABLE DEPARTMENTSTBL(
DEPARTMENTID INT PRIMARY KEY,
DEPARTMENTNAME VARCHAR(50) NOT NULL
);

--EMPLOYEE TABLE
CREATE TABLE EMPLOYEESTBL(
EMPLOYEEID INT PRIMARY KEY,
EMPNAME VARCHAR(60),
AGE INT CHECK (AGE>=18),
SALARY DECIMAL(10,2) DEFAULT 50000, 
DEPARTMENTID INT,
CONSTRAINT FK_DEPARTMENTS FOREIGN KEY (DEPARTMENTID) REFERENCES DEPARTMENTSTBL(DEPARTMENTID)
);

INSERT INTO DEPARTMENTSTBL(DEPARTMENTID,DEPARTMENTNAME) VALUES (101, 'HR');
INSERT INTO DEPARTMENTSTBL(DEPARTMENTID,DEPARTMENTNAME) VALUES (102, 'IT');
INSERT INTO DEPARTMENTSTBL(DEPARTMENTID,DEPARTMENTNAME) VALUES (103, 'QC');

INSERT INTO EMPLOYEESTBL(EMPLOYEEID,EMPNAME,AGE,SALARY, DEPARTMENTID) VALUES (103, 'EISHA', 21, 56666, 101);

INSERT INTO EMPLOYEESTBL(EMPLOYEEID,EMPNAME,AGE,SALARY, DEPARTMENTID) VALUES (104, 'RONAK', 23, 80000, 104); 
--The INSERT statement conflicted with the FOREIGN KEY constraint "FK_DEPARTMENTS". The conflict occurred in database "JIBE_Main", table "dbo.DEPARTMENTSTBL", column 'DEPARTMENTID'.

DROP TABLE EMPLOYEESTBL;
DROP TABLE DEPARTMENTSTBL;

--ADDING CONSTRAINTS (PRIMARY ID)
CREATE TABLE EMPLOYEESTBL(
EMPNAME VARCHAR(60),
AGE INT CHECK (AGE>=18),
SALARY DECIMAL(10,2) DEFAULT 50000
);

INSERT INTO EMPLOYEESTBL(EMPNAME,AGE,SALARY) VALUES ('EISHA', 21, 56666);

SELECT * FROM EMPLOYEESTBL;

ALTER TABLE EMPLOYEESTBL DROP COLUMN EMPLOYEEID;

ALTER TABLE EMPLOYEESTBL ADD EMPLOYEEID INT IDENTITY(1,1);
ALTER TABLE EMPLOYEESTBL ADD CONSTRAINT PK_EMPLOYEE PRIMARY KEY (EMPLOYEEID);

--ADD CONSTRAINT (FOREIGN KEY)
CREATE TABLE DEPARTMENTSTBL(
DEPARTMENTID INT PRIMARY KEY,
DEPARTMENTNAME VARCHAR(50) NOT NULL
);

ALTER TABLE EMPLOYEESTBL ADD DEPARTMENTID INT;
ALTER TABLE EMPLOYEESTBL ADD CONSTRAINT FKE_CONSTRAINT FOREIGN KEY  (DEPARTMENTID) REFERENCES DEPARTMENTSTBL(DEPARTMENTID);

--ADD CHECK CONSTRAINT
ALTER TABLE EMPLOYEESTBL ALTER COLUMN SALARY DROP DEFAULT;
ALTER TABLE EMPLOYEESTBL ALTER COLUMN SALARY INT;
ALTER TABLE EMPLOYEESTBL ADD CONSTRAINT CHECK_SALARY CHECK(SALARY>60000);


--IMPLEMENTING SQL CONSTRAINTS IN A LIBRARY MANAGEMENT SYSTEM

--AUTHORS TABLE 
CREATE TABLE AUTHOR(
AUTHORID INT PRIMARY KEY,
FIRSTNAME VARCHAR(30) NOT NULL,
LASTNAME VARCHAR(40) NOT NULL
);

--BOOKS TABLE 
CREATE TABLE BOOK(
BOOKID INT PRIMARY KEY,
TITLE VARCHAR(60) NOT NULL,
AUTHORID INT,
PUBLISHEDYEAR DATE,                          --CHECK YEAR BETWEEN 1500 TO CURRENT
CONSTRAINT FK_BOOK FOREIGN KEY (AUTHORID) REFERENCES AUTHOR(AUTHORID),
CONSTRAINT DATE_VALID CHECK (YEAR(PUBLISHEDYEAR) BETWEEN 1500 AND YEAR(GETDATE())),
);

--MEMBERS TABLE
CREATE TABLE MEMBERS(
MEMBERID INT PRIMARY KEY,
FNAME VARCHAR(40) NOT NULL,
LNAME VARCHAR(40) NOT NULL,
EMAIL VARCHAR(40) NOT NULL,
CONSTRAINT EMAIL_UNIQ UNIQUE(EMAIL),
);

CREATE TABLE LOANSTBL(
LOANID INT PRIMARY KEY,
BOOKID INT,    --FOREIGN KEY
MEMBERID INT,  --FOREIGN KEY
LOANDATE DATE NOT NULL, --CHECK CONSTRAINT
RETURNDATE DATE NOT NULL
CONSTRAINT BI_FK FOREIGN KEY (BOOKID) REFERENCES BOOK(BOOKID),
CONSTRAINT MEMBERID_FK FOREIGN KEY (MEMBERID) REFERENCES MEMBERS(MEMBERID),
CONSTRAINT RETURN_DATE CHECK (YEAR(RETURNDATE)>1500 AND LOANDATE<RETURNDATE),
);

INSERT INTO AUTHOR(AUTHORID, FIRSTNAME, LASTNAME) VALUES(2544, 'STANLEY','PETERSONS');

INSERT INTO BOOK(BOOKID, TITLE, AUTHORID, PUBLISHEDYEAR) VALUES(9900, 'ROME DIARIES',2544, '12-04-2000');

INSERT INTO MEMBERS(MEMBERID, FNAME, LNAME, EMAIL) VALUES (110, 'YUKTA', 'MANE', 'rya@gmail.com');

INSERT INTO LOANSTBL(LOANID,BOOKID,MEMBERID,LOANDATE,RETURNDATE) VALUES (4001, 9900, 110, '2024-09-28', '2025-01-23');

SELECT * FROM AUTHOR;
SELECT * FROM BOOK;
SELECT * FROM MEMBERS;
SELECT * fROM LOANSTBL;
